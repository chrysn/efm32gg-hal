[package]
name = "efm32gg-hal"
version = "0.3.0"
authors = ["chrysn <chrysn@fsfe.org>"]

edition = "2018"

categories = ["embedded", "no-std"]
description = "HAL for the EFM32GG (EFM32 Giant Gecko) family of microcontrollers"
keywords = ["arm", "cortex-m", "efm32", "efm32gg", "embedded-hal-impl"]
license = "MIT OR Apache-2.0"

readme = "README.md"
repository = "https://github.com/chrysn/efm32gg-hal"
# documentation = "https://docs.rs/efm32gg-hal" # only to be advertised when actually useful

[dependencies]
cortex-m = "0.7.0"

# version is a wild guess. dependency on unproven features should only be
# present if own unproven feature is active (but how do i do that?).
embedded-hal = { version = "0.2.0", features = ["unproven"] }

# for efm32gg, it's probably convenient to depend on the biggest available
# svd2rust-generated crate (the chips will let us; FWICT all EFM32GG are the
# same and just have fewer pins wired); crates like efr32xg1 are already as
# generic as they can be with svd2rust. having bobbin will hopefully make this
# even smoother.

efm32gg990 = { version = "0.1.2", optional = true }
efr32xg1 = { version = "0.2.0", optional = true }

[features]

default = ["unproven"]
unproven = []

# Used by the newer generation of chips where peripherals have their individual
# functions routable, not only peripherals as a whole.
_routing_per_function = []

chip-efm32gg = [ "efm32gg990", "_has_timer2", "_has_timer3" ]
chip-efr32xg1 = [ "efr32xg1", "_routing_per_function" ]

# Marker features pulled in by the individual chip features. Enabling them
# manually results in build-time errors (as clocks or peripherals are accessed
# that are not available).
_has_timer2 = []
_has_timer3 = []
